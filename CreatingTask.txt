now we are creating task so for that we should be doing that ont he admin/tasksand for create task option in dashboard menu 


import React, { useState } from 'react'
import Dashboard from './Dashboard'
import DashboardLayout from '../../components/layouts/DashboardLayout'
import { PRIORITY_DATA } from '../../utils/data'
import axiosInstance from '../../utils/axiosInstance'
import { API_PATHS } from '../../utils/apiPaths'
import toast, { useToasterStore } from "react-hot-toast"
import { useLocation, useNavigate } from 'react-router-dom'
import moment from 'moment'
import { LuTrash } from 'react-icons/lu'
import SelectDropDown from '../../components/inputs/SelectDropDown'
const CreateTask = () => {
  

    const location = useLocation();
    const {taskId}=location.state || {};
    const navigate=useNavigate();

    const [taskData,setTaskData]=useState({
      title:"",
      description:"",
      priority:"Low",
      dueDate:null,
      assignedTo:[],
      todoChecklist: [],
      attachments:[],
    });

    const [currentTask,setCurrentTask]=useState(null);

    const[error,setError]=useState("");
    const[loading,setLoading]=useState(false);

    const[openDeleteAlert,setOpenDeleteAlert]=useState(false);

    const handleValueChange=(key,value) =>{
      setTaskData((prevData) => ({...prevData,[key]:value}));

    };
    
    const clearData =()=>{
      //rest form
      setTaskData({
        title:"",
        description:"",
        priority:"Low",
        dueDate: null,
        assignedTo:[],
        todoChecklist:[],
        attachments:[],



      });
    };

    //create task

    const createTask=async()=>{};

    //update task
    const updateTask=async()=>{};

    const handleSubmit=async()=>{};

    //gettask by id
    const getTaskDetailsByID=async () =>{};

    //delete task
    const deleteTask=async()=>{};

return (
    <DashboardLayout activeMenu="Create Task">
      <div className='mt-5'>
        <div className='grid grid-cols-1 md:grid-cols-4 mt-4'>
          <div className='form-card col-span-3'>
            <div className='flex items-center justify-between'>
              <h2 className='text-xl md:text-xl font-medium'>
                {taskId ? "Update Task":"Create Task"}
              </h2>
              {taskId && (
                <button 
                className='flex items-center gap-1.5 text-[13px] font-medium text-rose-500 bg-rose-500 rounded px-2 py-1 border border-rose-100 hover:border-rose-300 cursor-pointer'
                onClick={() =>setOpenDeleteAlert(true)}
                >
                <LuTrash className='text-base' />Delete
                </button>
              )}
            </div>
            <div className='mt-4'>
              <label className='text-xs font-medium text-slate-600'>
                Task Title
              </label>

              <input 
              placeholder='Create App UI'
              className='form-input'
              value={taskData.title}
              onChange={({target}) => 
                handleValueChange("title",target.value)
              }
              />
            </div>
            <div className='mt-3'>
              <label className='text-xs font-medium text-slate-600'>
                Description
              </label>

              <textarea
              placeholder='Describe task'
              className='form-input'
              rows={4}
              value={taskData.description}
              onChange={({target}) =>
              handleValueChange("description",target.value)
              }
              />
            </div>

            <div className='grid grid-cols-12 gap-4 mt-2'>
              <div className='col-span-6 md:col-span-4'>
                <label className='text-xs font-medium text-slate-600'>
                  Priroity
                </label>

                <SelectDropDown
                options={PRIORITY_DATA}
                value={taskData.priority}
                onChange={(value) => handleValueChange("priority,value")} 
                placeholder="Select Prirority"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
    );  
}
export default CreateTask




Brings in all required dependencies, components, and utility functions.
SelectDropDown is your custom dropdown.
PRIORITY_DATA likely contains options like Low, Medium, High.

Module             	        Purpose
useState	             To manage local component state (like form values)
DashboardLayout	         Your custom layout wrapper for admin dashboard
PRIORITY_DATA	         A constant array like: [{ label: 'Low', value: 'Low' }, ...]
axiosInstance	         Axios pre-configured for making HTTP requests (e.g., with auth headers)
toast	                 Shows notifications (success/error messages)
useLocation, useNavigate	React Router hooks for reading params and navigation
moment	                 For date formatting (if needed)
LuTrash	                 Trash icon for the delete button
SelectDropDown	         Custom dropdown component for selecting priority

const CreateTask = () => {
  const location = useLocation();
  const { taskId } = location.state || {};
  const navigate = useNavigate();

üìå What it does:
useLocation() retrieves task ID if passed (for editing).taskId helps you decide whether it's Create Mode or Edit Mode.
useNavigate() lets you redirect after task creation or deletion.


const [taskData, setTaskData] = useState({
  title: "",
  description: "",
  priority: "Low",
  dueDate: null,
  assignedTo: [],
  todoChecklist: [],
  attachments: [],
});

Each field in taskData matches input fields in the form:

Field	               Purpose
title	             Task name
description	         Task details
priority	         e.g., "Low", "High"
dueDate              Target deadline
assignedTo	         Which users it's assigned to
todoChecklist	     Subtasks or checklist items
attachments	         File uploads (images, PDFs, etc.)



const [currentTask, setCurrentTask] = useState(null);
const [error, setError] = useState("");
const [loading, setLoading] = useState(false);
const [openDeleteAlert, setOpenDeleteAlert] = useState(false);


State	        Usage
currentTask 	Stores full task info when editing
error	        For showing form validation or API errors
loading      	To show a spinner when fetching or saving
openDeleteAlert	To trigger delete confirmation popup



**üß† 3. Helper Functions**
‚úÖ Update any field in taskData

const handleValueChange = (key, value) => {
  setTaskData((prevData) => ({ ...prevData, [key]: value }));
};
Example usage:
handleValueChange("title", "Finish UI")

It replaces only title field inside taskData.


const clearData = () => {
  setTaskData({
    title: "",
    description: "",
    priority: "Low",
    dueDate: null,
    assignedTo: [],
    todoChecklist: [],
    attachments: [],
  });
};
Used to reset the form after submission or cancel.

**üß± 4. Main JSX ‚Äì UI Layout**
<DashboardLayout activeMenu="Create Task">

This wraps your whole form in a layout with sidebar/topbar, and highlights "Create Task" in the menu.

üìÑ Title + Delete Button
<h2>{taskId ? "Update Task" : "Create Task"}</h2>
{taskId && (
  <button onClick={() => setOpenDeleteAlert(true)}>
    <LuTrash /> Delete
  </button>
)}
If taskId exists, show "Update Task" and "Delete" button.
If not, show "Create Task" and no delete button.


‚úèÔ∏è Title Input
<input 
  placeholder='Create App UI'
  value={taskData.title}
  onChange={({ target }) => handleValueChange("title", target.value)}
/>
Binds taskData.title to an input.

üìù Description TextArea
<textarea
  placeholder='Describe task'
  rows={4}
  value={taskData.description}
  onChange={({ target }) => handleValueChange("description", target.value)}
/>
Binds taskData.description to a textarea.


üîΩ Priority DropDown
<SelectDropDown
  options={PRIORITY_DATA}
  value={taskData.priority}
  onChange={(value) => handleValueChange("priority,value")} 
  placeholder="Select Priority"
/>


taskData holds form data.
currentTask can store the fetched task if editing.
openDeleteAlert can show a delete confirmation dialog.
const handleValueChange = (key, value) => {
  setTaskData((prevData) => ({ ...prevData, [key]: value }));
};

Updates any key in taskData dynamically.


const clearData = () => {
  setTaskData({
    title: "",
    description: "",
    priority: "Low",
    dueDate: null,
    assignedTo: [],
    todoChecklist: [],
    attachments: [],
  });
};
Clears the form.



-----------------
now in creating task we will make description menu with the text TextArea

<div className='mt-3'>
              <label className='text-xs font-medium text-slate-600'>
                Description
              </label>

              <textarea
              placeholder='Describe task'
              className='form-input'
              rows={4}
              value={taskData.description}
              onChange={({target}) =>
              handleValueChange("description",target.value)
              }
              />
            </div>


  <label className='text-xs font-medium text-slate-600'>
    Description
  </label>
Displays the label "Description" above the textarea.
Styling:
text-xs: extra-small font.
font-medium: medium font weight.
text-slate-600: slate gray color (slightly dark).


  <textarea
    placeholder='Describe task'
    className='form-input'
    rows={4}
    value={taskData.description}
    onChange={({target}) =>
      handleValueChange("description", target.value)
    }
  />


üî∏ Props:
placeholder='Describe task': shows placeholder text when the field is empty.

className='form-input': probably a custom Tailwind class or utility class used to style input fields.

rows={4}: sets the visible height of the textarea to 4 rows.

value={taskData.description}: binds the textarea value to taskData.description (i.e., controlled input).

onChange={({target}) => handleValueChange("description", target.value)}:

Listens for changes in the textarea.

Calls handleValueChange function, passing:

"description" as the key.

target.value as the new value.


Handling Changes:

When a user types, onChange triggers:

handleValueChange("description", target.value)
This calls your function:

const handleValueChange = (key, value) => {
  setTaskData((prevData) => ({ ...prevData, [key]: value }));
};
Which updates only the description field in taskData, without affecting other fields.




<div className='col-span-6 md:col-span-4'>
  <label className='text-xs font-medium text-slate-600'>
    Priority
  </label>

  <SelectDropDown
    options={PRIORITY_DATA}
    value={taskData.priority}
    onChange={(value) => handleValueChange("priority", value)}
    placeholder="Select Priority"
  />
</div>

DUE DATE--------------->

<div className='col-span-6 md:col-span-4'>
  <label className='text-xs font-medium text-slate-600'>
    Due Date
  </label>

  <input 
    placeholder='Create App UI'
    className=''
    value={taskData.dueDate}
    onChange={({ target }) => handleValueChange("dueDate", target.value)}
    type="date"
  />
</div>

Input type: date, so users can pick a date.
Value: Controlled with taskData.dueDate.
Change Handler: Updates dueDate in state using handleValueChange.



<div className='col-span-6 md:col-span-3'>
  <label className='text-xs font-medium text-slate-600'>
    Assign To
  </label>
